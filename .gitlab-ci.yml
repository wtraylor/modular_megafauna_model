# SPDX-FileCopyrightText: 2020 W. Traylor <wolfgang.traylor@senckenberg.de>
#
# SPDX-License-Identifier: LGPL-3.0-or-later

stages:
  - lint
  - build
  - test
  - postprocess

variables:
  # Install packages without user interaction.
  DEBIAN_FRONTEND: "noninteractive"

# The documentation and the source code are compiled separately so that the
# pipeline can continue with the unit tests even if doxygen fails.

# Check whether the project is REUSE compliant (https://reuse.software).
check_license:
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  stage: lint
  script:
    - reuse lint

# The develop branch should reset the version to "0.0.0" so that there can
# never be a confusion with a released version. Compare CONTRIBUTING.md.
check_develop_version:
  image: debian:stable-slim
  stage: lint
  rules:
    # Only execute on tags that look like a version, e.g.: "0.5.1"
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
  script:
    - test "0.0.0" == $(grep "^version\s*:" CITATION.cff | grep -oP '\d+\.\d+\.\d+.*')
    - grep --silent "^date-released\s*:\s*$" CITATION.cff
    - test "0.0.0" == $(grep '"version"' codemeta.json | grep -oP '\d+\.\d+\.\d+')
    - grep --silent '"dateModified":\s*""' codemeta.json
    - test "0.0.0" == $(grep "^\s*VERSION" CMakeLists.txt | grep -oP '\d+\.\d+\.\d+.*')

# Check that the tag matches the version in the CMakeLists.txt file.
# If the tag doesn’t match, you will need to change CMakeLists.txt and
# forcefully move the tag to the corrected commit.
check_release_version:
  image: debian:stable-slim
  stage: lint
  rules:
    # Only execute on tags that look like a release version, e.g., "0.5.1".
    # Prerelease versions (e.g., "1.2.0-alpha.1" or "1.2.0-beta.3") are not
    # required to have the version as metadata.
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+/'
      when: always
  script:
    - echo "If this fails, check that the Git tag matches VERSION in CMakeLists.txt."
    - test "$CI_COMMIT_TAG" == $(grep "^\s*VERSION" CMakeLists.txt | grep -oP '\d+\.\d+\.\d+.*')
    - echo "If this fails, check that the Git tag matches version in CITATION.cff"
    - test "$CI_COMMIT_TAG" == $(grep "^version\s*:" CITATION.cff | grep -oP '\d+\.\d+\.\d+.*')
    - echo "If this fails, check that the Git tag matches version in codemeta.json."
    - test "$CI_COMMIT_TAG" == $(grep '"version"' codemeta.json | grep -oP '(?<=")\d+\.\d+\.\d+.*(?=")')

# Check that all files are correctly formatted according to ".clang-format".
# Exclude the "external/" directory because they will use different formatting.
clang-format:
  image:
    name: mikedld/clang-format:12-latest # Update this to later clang versions as necessary.
    entrypoint: [""]
  stage: lint
  script:
    # We need to use simple BusyBox `find` syntax here.
    - >
      clang-format --dry-run --Werror
      $(find src/     -iname '*.cpp' -or -iname '*.h')
      $(find docs/    -iname '*.cpp' -or -iname '*.h')
      $(find include/ -iname '*.cpp' -or -iname '*.h')
      $(find tests/   -iname '*.cpp' -or -iname '*.h')
      $(find tools/   -iname '*.cpp' -or -iname '*.h')

compile:
  image: gcc:latest
  stage: build
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq cmake
  script:
    - mkdir --parents build
    - cp examples/demo_simulation.toml build/
    - cd build
    - cmake
      -DBUILD_TESTING=ON
      -DBUILD_DEMO_SIMULATOR=ON
      -DBUILD_DOC=OFF ..
    - make --jobs=6
      megafauna_demo_simulator
      megafauna_insfile_linter
      megafauna_unit_tests
  artifacts:
    paths:
      - build/demo_results.Rmd
      - build/demo_simulation.toml
      - build/megafauna.toml
      - build/megafauna_demo_simulator
      - build/megafauna_insfile_linter
      - build/megafauna_unit_tests
    expire_in: 20 minutes

# Compare the Sphinx instructions in "docs/sphinx/conf.py".
doxygen:
  image: readthedocs/build:latest
  stage: build
  before_script:
    - conda install --yes cmake
    - conda install --yes --channel conda-forge doxygen
    - PATH=$HOME/.conda/bin:$PATH
  script:
    - mkdir --parents build
    - cd build
    - cmake
      -DSTOP_DOXYGEN_ON_WARNING=ON
      -DBUILD_TESTING=OFF
      -DBUILD_DEMO_SIMULATOR=OFF
      -DBUILD_DOC=ON ..
    - make --jobs=6 megafauna_docs
  artifacts:
    paths:
      - build/docs/html/

unit_tests:
  image: gcc:latest
  stage: test
  needs: ["compile"]
  script:
    - cd build
    - ./megafauna_unit_tests

# Test coverage for codecov.io
# The environment variable "CODECOV_TOKEN" must be provided. Compare:
# <https://docs.codecov.io/docs/about-the-codecov-bash-uploader#upload-token>
# <https://docs.gitlab.com/ce/ci/variables/README.html#project-cicd-variables>
code_coverage:
  image: gcc:latest
  stage: test
  needs: ["compile"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq cmake gcovr
  script:
    - mkdir --parents build
    - cd build
    - cmake -DBUILD_TESTING=ON -DENABLE_COVERAGE=ON -DBUILD_DOC=OFF ..
    - make --jobs=6 megafauna_unit_tests
    - ./megafauna_unit_tests
    - make --jobs=6 gcov
    - bash <(curl -s https://codecov.io/bash) -X gcov

# Check that the linter works and that the example instruction files are
# correct.
linter:
  image: gcc:latest
  stage: test
  needs: ["compile"]
  script:
    # Create a symbolic link in order to shorten instructions.
    - ln -s ./build/megafauna_insfile_linter lint
    # GOOD FILES:
    - ./lint examples/megafauna.toml
    - for f in tests/good_insfiles/*.toml; do ./lint $f; done
    - ./lint tests/good_insfiles/legacy_massdensity_per_hft.toml 2>&1 | grep -i 'mass_density_per_hft.*deprecated'
    # BAD FILES:
    # These checks could be done with the catch framework, too
    # (CHECK_THROWS_AS). That would be more flexible than checking for a
    # specific error message in STDERR.
    # Check *all* bad instruction files:
    - for f in tests/bad_insfiles/*.toml; do
        echo;
        echo $f;
        (! ./lint $f);
      done
    # Check for specific error messages:
    # Note that commands that expected to fail need to be executed in a
    # subshell like this: `(command || true)`
    - (./lint tests/bad_insfiles/breeding_start_ambiguous.toml 2>&1 || true) | grep -iq 'breeding_season\.start.*ambiguous'
    - (./lint tests/bad_insfiles/wrong_type_01.toml 2>&1 || true) | grep -iq 'body_mass\.female.*wrong type'
    - (./lint tests/bad_insfiles/wrong_type_02.toml 2>&1 || true) | grep -iq 'body_mass\.female.*wrong type'
    - (./lint tests/bad_insfiles/wrong_type_03.toml 2>&1 || true) | grep -iq 'output\.text_tables\.tables.*wrong type.*expected array of string'
    - (./lint tests/bad_insfiles/wrong_type_04.toml 2>&1 || true) | grep -iq 'expenditure\.components.*wrong type'
    - (./lint tests/bad_insfiles/wrong_type_05.toml 2>&1 || true) | grep -iq 'mortality\.factors.*wrong type'
    - (./lint tests/bad_insfiles/wrong_type_06.toml 2>&1 || true) | grep -iq 'simulation\.establishment_interval.*wrong type'
    - (./lint tests/bad_insfiles/wrong_type_07.toml 2>&1 || true) | grep -iq 'output\.text_tables\.precision.*wrong type'
    - (./lint tests/bad_insfiles/wrong_type_08.toml 2>&1 || true) | grep -iq 'body_mass\.female.*wrong type'
    - (./lint tests/bad_insfiles/two_groups_with_same_name.toml 2>&1 || true) | grep -iq 'group.*is defined twice'
    - (./lint tests/bad_insfiles/two_hfts_with_same_name.toml 2>&1 || true) | grep -iq 'HFT.*is defined twice'

memcheck:
  image: gcc:latest
  stage: test
  needs: ["compile"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq valgrind
  script:
    - cd build
    # Only run two years:
    - sed -e 's/^\s*years\s*=.*/years = 2/' --in-place
      demo_simulation.toml
    # The following command needs to be quoted as a whole so that the YAML
    # parser does not interpret the "|" special character.
    - "valgrind
      --leak-check=full
      --show-leak-kinds=all
      --track-origins=yes
      --verbose
      ./megafauna_demo_simulator
      megafauna.toml
      demo_simulation.toml
      | tee memcheck.log"
    # If the error summary has not zero errors, the grep command will fail.
    # Note that the "!" doesn’t work without starting a subshell with
    # parentheses. Compare <https://stackoverflow.com/a/53753605>.
    - "(! grep --silent 'ERROR SUMMARY: 0 errors' memcheck.log)"
  artifacts:
    paths:
      - build/memcheck.log

demo_toml_files:
  image: gcc:latest
  stage: test
  needs: ["compile"]
  script:
    - (! ./build/megafauna_demo_simulator
      "tests/good_insfiles/two_hfts_01.toml"
      "tests/bad_demosim_insfiles/habitats_not_multiple_of_hfts_01.toml");
    - "rm -f *.tsv"
      # Without HFTs, the option "one_hft_per_habitat" has no effect.
    - ./build/megafauna_demo_simulator
      "tests/good_insfiles/no_hfts_02.toml"
      "tests/bad_demosim_insfiles/habitats_not_multiple_of_hfts_01.toml";
    - "rm -f *.tsv"
    - (! ./build/megafauna_demo_simulator
      "good_insfiles/two_hfts_01.toml"
      "tests/bad_demosim_insfiles/habitats_not_multiple_of_hfts_02.toml");
    - "rm -f *.tsv"
    - ./build/megafauna_demo_simulator
      "tests/good_insfiles/two_hfts_01.toml"
      "tests/good_demosim_insfiles/habitats_is_multiple_of_hfts_01.toml";
    - "rm -f *.tsv"
      # A simulation should run without HFTs and still produce (non-herbivore)
      # output.
    - ./build/megafauna_demo_simulator
      "tests/good_insfiles/no_hfts_01.toml"
      "tests/good_demosim_insfiles/minimal.toml";
    - test -f available_forage.tsv
    - test -f digestibility.tsv
    - (! test -f body_fat.tsv)
    - (! test -f eaten_forage_per_ind.tsv)
    - (! test -f eaten_nitrogen_per_ind.tsv)
    - (! test -f individual_density.tsv)
    - (! test -f mass_density.tsv)

demo_simulation:
  image: gcc:latest
  stage: test
  needs: ["compile"]
  script:
    - cd build
    - ./megafauna_demo_simulator
      "megafauna.toml"
      "demo_simulation.toml"
  artifacts:
    paths:
      - build/demo_results.Rmd
        # All output files necessary for plotting demo results:
      - build/available_forage.tsv
      - build/body_fat.tsv
      - build/digestibility.tsv
      - build/eaten_forage_per_ind.tsv
      - build/eaten_nitrogen_per_ind.tsv
      - build/individual_density.tsv
      - build/mass_density.tsv
    expire_in: 20 minutes

plot_demo_results:
  # This job should match the quickstart guide in the README.md.
  image: r-base:latest
  stage: postprocess
  needs: ["demo_simulation"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq pandoc
    - Rscript -e 'install.packages("rmarkdown")'
  script:
    - cd build
    - Rscript -e "rmarkdown::render('demo_results.Rmd')"
    - test -f "demo_results.html"
  artifacts:
    paths:
      - build/demo_results.html
